---
name: ci-mssql

permissions:
  contents: read
  pull-requests: write

on:
  - pull_request
  - push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: PHP ${{ matrix.php }}-mssql-${{ matrix.mssql }}

    env:
      COVERAGE_DRIVER: ${{ matrix.php == 8.1 && 'pcov' || 'none' }}
      PHP_EXTENSIONS: apcu, curl, intl, pdo, pdo_sqlsrv
      PHP_INI_VALUES: apc.enabled=1,apc.shm_size=32M,apc.enable_cli=1, date.timezone='UTC'
      PHPUNIT_GROUP: mssql

    runs-on: ubuntu-latest

    strategy:
      matrix:
        php: [8.1, 8.2, 8.3, 8.4]

        mssql:
          - server:2019-latest
          - server:2022-latest

    services:
      mssql:
        image: mcr.microsoft.com/mssql/${{ matrix.mssql }}
        env:
          SA_PASSWORD: YourStrong!Passw0rd
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --name=mssql
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'SELECT 1'"
          --health-interval=10s
          --health-retries=3
          --health-timeout=5s

    steps:
      - name: Monitor action permissions.
        if: runner.os != 'Windows'
        uses: GitHubSecurityLab/actions-permissions/monitor@v1

      - name: Checkout.
        uses: actions/checkout@v5

      - name: Install ODBC driver.
        run: sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18

      - name: Create MS SQL Database.
        run: docker exec -i mssql /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U SA -P 'YourStrong!Passw0rd' -Q 'CREATE DATABASE yiitest'

      - name: Setup PHP with Composer.
        uses: ./.github/actions/php-setup
        with:
          coverage-driver: ${{ env.COVERAGE_DRIVER }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}, session.save_path="${{ runner.temp }}"
          php-version: ${{ matrix.php }}

      - name: Run PHPUnit tests.
        uses: ./.github/actions/phpunit
        with:
          coverage-driver: ${{ env.COVERAGE_DRIVER }}
          coverage-token: ${{ secrets.CODECOV_TOKEN }}
          group: ${{ env.PHPUNIT_GROUP }}
